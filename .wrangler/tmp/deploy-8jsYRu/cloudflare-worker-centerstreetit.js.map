{
  "version": 3,
  "sources": ["../../../cloudflare-worker-centerstreetit.js"],
  "sourceRoot": "C:\\Users\\giuff\\My Drive\\Staple\\Websites\\centerstreetit\\.wrangler\\tmp\\deploy-8jsYRu",
  "sourcesContent": ["// Cloudflare Worker for Decap CMS OAuth with GitHub\r\n// Deploy this to: decap-proxy-centerstreetit.giuffa88.workers.dev\r\n// This worker handles the OAuth flow between Decap CMS and GitHub\r\n\r\nexport default {\r\n  async fetch(request, env, ctx) {\r\n    const url = new URL(request.url);\r\n    \r\n    // Handle CORS preflight requests\r\n    if (request.method === 'OPTIONS') {\r\n      return new Response(null, {\r\n        status: 200,\r\n        headers: {\r\n          'Access-Control-Allow-Origin': '*',\r\n          'Access-Control-Allow-Methods': 'GET, POST, OPTIONS',\r\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization',\r\n          'Access-Control-Max-Age': '86400',\r\n        },\r\n      });\r\n    }\r\n\r\n    // OAuth callback handler\r\n    if (url.pathname === '/callback') {\r\n      return handleCallback(request, env);\r\n    }\r\n\r\n    // OAuth authorization handler  \r\n    if (url.pathname === '/auth') {\r\n      return handleAuth(request, env);\r\n    }\r\n\r\n    // Default response\r\n    return new Response('Decap CMS OAuth Worker for Center Street IT', {\r\n      status: 200,\r\n      headers: {\r\n        'Access-Control-Allow-Origin': '*',\r\n        'Content-Type': 'text/plain',\r\n      },\r\n    });\r\n  },\r\n};\r\n\r\nasync function handleAuth(request, env) {\r\n  const url = new URL(request.url);\r\n  const provider = url.searchParams.get('provider');\r\n  \r\n  if (provider !== 'github') {\r\n    return new Response('Only GitHub provider is supported', { status: 400 });\r\n  }\r\n\r\n  // Generate a random state parameter for security\r\n  const state = crypto.randomUUID();\r\n  \r\n  // GitHub OAuth authorization URL\r\n  const authUrl = new URL('https://github.com/login/oauth/authorize');\r\n  authUrl.searchParams.set('client_id', env.GITHUB_CLIENT_ID);\r\n  authUrl.searchParams.set('redirect_uri', `${url.origin}/callback`);\r\n  authUrl.searchParams.set('scope', 'repo,user');\r\n  authUrl.searchParams.set('state', state);\r\n\r\n  return Response.redirect(authUrl.toString(), 302);\r\n}\r\n\r\nasync function handleCallback(request, env) {\r\n  const url = new URL(request.url);\r\n  const code = url.searchParams.get('code');\r\n  const state = url.searchParams.get('state');\r\n\r\n  if (!code) {\r\n    return new Response('Authorization code missing', { status: 400 });\r\n  }\r\n\r\n  try {\r\n    // Exchange code for access token\r\n    const tokenResponse = await fetch('https://github.com/login/oauth/access_token', {\r\n      method: 'POST',\r\n      headers: {\r\n        'Accept': 'application/json',\r\n        'Content-Type': 'application/json',\r\n      },\r\n      body: JSON.stringify({\r\n        client_id: env.GITHUB_CLIENT_ID,\r\n        client_secret: env.GITHUB_CLIENT_SECRET,\r\n        code: code,\r\n      }),\r\n    });\r\n\r\n    const tokenData = await tokenResponse.json();\r\n\r\n    if (tokenData.error) {\r\n      throw new Error(tokenData.error_description || tokenData.error);\r\n    }\r\n\r\n    // Get user information\r\n    const userResponse = await fetch('https://api.github.com/user', {\r\n      headers: {\r\n        'Authorization': `token ${tokenData.access_token}`,\r\n        'User-Agent': 'Decap-CMS-OAuth-Worker',\r\n      },\r\n    });\r\n\r\n    const userData = await userResponse.json();\r\n\r\n    // Return success page with the token for Decap CMS to use\r\n    const html = `\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Authorization Successful</title>\r\n    <meta charset=\"utf-8\">\r\n    <style>\r\n        body {\r\n            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            min-height: 100vh;\r\n            margin: 0;\r\n            background: #f5f5f5;\r\n        }\r\n        .container {\r\n            background: white;\r\n            padding: 2rem;\r\n            border-radius: 8px;\r\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n            text-align: center;\r\n            max-width: 400px;\r\n        }\r\n        .success {\r\n            color: #28a745;\r\n            font-size: 1.2rem;\r\n            margin-bottom: 1rem;\r\n        }\r\n        .user-info {\r\n            color: #666;\r\n            margin-bottom: 1rem;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <div class=\"success\">\u2705 Authorization Successful!</div>\r\n        <div class=\"user-info\">\r\n            Welcome, <strong>${userData.name || userData.login}</strong>\r\n        </div>\r\n        <p>You can now close this window and return to the CMS.</p>\r\n    </div>\r\n    \r\n    <script>\r\n        // Post message to parent window (for Decap CMS)\r\n        if (window.opener) {\r\n            // Send message to Decap CMS - try multiple formats for compatibility\r\n            const authData = {\r\n                token: '${tokenData.access_token}',\r\n                provider: 'github'\r\n            };\r\n            \r\n            // Standard Decap CMS format\r\n            window.opener.postMessage(\r\n                'authorization:github:success:' + JSON.stringify(authData),\r\n                '*'\r\n            );\r\n            \r\n            // Fallback format\r\n            window.opener.postMessage({\r\n                type: 'authorization_success',\r\n                provider: 'github',\r\n                token: '${tokenData.access_token}'\r\n            }, '*');\r\n            \r\n            // Close popup after delay to ensure messages are sent\r\n            setTimeout(() => window.close(), 1000);\r\n        }\r\n    </script>\r\n</body>\r\n</html>`;\r\n\r\n    return new Response(html, {\r\n      status: 200,\r\n      headers: {\r\n        'Content-Type': 'text/html',\r\n        'Access-Control-Allow-Origin': '*',\r\n      },\r\n    });\r\n\r\n  } catch (error) {\r\n    console.error('OAuth error:', error);\r\n    \r\n    const errorHtml = `\r\n<!DOCTYPE html>\r\n<html>\r\n<head>\r\n    <title>Authorization Failed</title>\r\n    <meta charset=\"utf-8\">\r\n    <style>\r\n        body {\r\n            font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, sans-serif;\r\n            display: flex;\r\n            justify-content: center;\r\n            align-items: center;\r\n            min-height: 100vh;\r\n            margin: 0;\r\n            background: #f5f5f5;\r\n        }\r\n        .container {\r\n            background: white;\r\n            padding: 2rem;\r\n            border-radius: 8px;\r\n            box-shadow: 0 2px 10px rgba(0,0,0,0.1);\r\n            text-align: center;\r\n            max-width: 400px;\r\n        }\r\n        .error {\r\n            color: #dc3545;\r\n            font-size: 1.2rem;\r\n            margin-bottom: 1rem;\r\n        }\r\n    </style>\r\n</head>\r\n<body>\r\n    <div class=\"container\">\r\n        <div class=\"error\">\u274C Authorization Failed</div>\r\n        <p>Error: ${error.message}</p>\r\n        <p>Please try again or contact support.</p>\r\n    </div>\r\n</body>\r\n</html>`;\r\n\r\n    return new Response(errorHtml, {\r\n      status: 500,\r\n      headers: {\r\n        'Content-Type': 'text/html',\r\n        'Access-Control-Allow-Origin': '*',\r\n      },\r\n    });\r\n  }\r\n}\r\n"],
  "mappings": "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",
  "names": []
}
